@page "/"
@inject IPollService PollService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject IJSRuntime JS

<h1 class="text-center">Polls</h1>

@if (Polls == null)
{
    <span>Loading...</span>
}
else if(Polls.Count == 0)
{
    <span>There are no Polls made yet.</span>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Poll </th>
                <th>Number of questions</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in Polls)
            {
                <tr>
                    <td>@p.Name</td>
                    <td>@p.Questions.Count</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=>StartPoll(p)">Start</button>
                        <button class="btn btn-secondary" @onclick="()=>EditPoll(p.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="()=>RemovePoll(p)">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code{

    public List<Poll> Polls { get; set; }

    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        Polls = await PollService.GetPolls();
        foreach(var p in Polls)
        {
            p.Questions =  p.Questions.OrderBy(x => x.Order).ToList();
            foreach(var q in p.Questions)
            {
                q.Answers = q.Answers.OrderBy(x => x.Order).ToList();
            }
        }
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/pollhub"))
            .Build();
        await hubConnection.StartAsync();
    }

    private async Task StartPoll(Poll poll)
    {
        await hubConnection.SendAsync("SendPoll", poll);
        NavigationManager.NavigateTo($"/result");
    }

    private async Task RemovePoll(Poll poll)
    {
        if (await JS.InvokeAsync<bool>("confirm", $"Remove \"{poll.Name}?\""))
        {
            await PollService.RemovePoll(poll.Id);
            Polls = await PollService.GetPolls();
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public void EditPoll(int pollId)
    {
        NavigationManager.NavigateTo($"/edit/{pollId}");
    }

}
