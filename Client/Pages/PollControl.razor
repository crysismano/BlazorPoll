@page "/pollcontrol"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@if (Poll is null)
{
    <p>loading...</p>
}
else
{
    <h1>Poll: @Poll.Name</h1>
    <h1>Question:@Poll.Questions.ElementAt(_currentQuestionIdx).Text </h1>
    <h3>Remaing questions: @_remainingNumberOfQuestions</h3>
    <button type="button" class="btn btn-primary" @onclick="GetNextQuestion">NEXT!</button>
}
@code {
    private HubConnection hubConnection;

    public Poll Poll { get; set; }

    private int _currentQuestionIdx;

    private int _remainingNumberOfQuestions;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/pollhub"))
            .Build();

        hubConnection.On<Poll>("ReceivePoll", (poll) =>
        {
            Poll = poll;
            _currentQuestionIdx = 0;
            _remainingNumberOfQuestions = poll.Questions.Count() - 1;
            StateHasChanged();
        });
        await hubConnection.StartAsync();
    }

    public async Task GetNextQuestion()
    {
        if (_currentQuestionIdx + 1 < Poll.Questions.Count)
        {
            await hubConnection.SendAsync("GetNextQuestion");
            _remainingNumberOfQuestions--;
            _currentQuestionIdx++;
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
