@page "/create"
@inject IPollService PollService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using System.Linq

<PollEditor Poll="Poll" Questions="Questions" Title="Create" HandleSubmit="HandleSubmit"/>

@code {
    public Poll Poll { get; set; } = new Poll();
    public List<Question> Questions { get; set; } = new List<Question>();

    protected override void OnInitialized()
    {
        Questions.Add(new Question());
        Questions[0].Order = 1;
        Questions[0].Answers = new List<Answer>();
        Questions[0].Answers.Add(new Answer(){Order = 1});
    }

    async Task HandleSubmit()
    {
        if (Poll.Name is null || Poll.Name == "")
        {
            await JS.InvokeVoidAsync("alert", "Please, fill the Poll Name field");
            return;
        }
        List<Question> questions = Questions.Where(x => x.Text != "").ToList();
        if (questions.Count == 0){
            await JS.InvokeVoidAsync("alert", "You have to make atleast one Question");
            return;
        }
        foreach(var q in questions)
        {
            var nonEmptyAnswers = q.Answers.Where(x => x.Text != "").ToList();
            if(nonEmptyAnswers.Count == 0)
            {
                await JS.InvokeVoidAsync("alert", "Please, atleast give one answer to every question");
                return;
            }
            q.Answers = nonEmptyAnswers;
        }
        questions = questions.Where(x => x.Text != "").ToList();
        foreach(var (q,i) in questions.Select((q, i) => (q, i)))
        {
            q.Order = i + 1;
        }
        Poll.Questions = questions;
        await PollService.CreatePoll(Poll);
        NavigationManager.NavigateTo($"/");
    }
}
