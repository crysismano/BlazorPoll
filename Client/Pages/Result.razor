@page "/result"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject IPollService PollService

@if (Question is null)
{
    <p>Waiting for the presenter to start a poll...</p>
}
else
{
    <h2 class="text-center">@Question.Text</h2>
    <hr />
    <dl class="row">
        @{int index = 0;}
        @foreach (var a in Answers)
        {
            <dt class="col-3">
                @if (_isShowingAnswers || _isShowingCorrectAnswer) 
                {
                    <span>@a.Text</span>
                    @if (_isShowingCorrectAnswer && a.CorrectAnswer)
                    {
                        <i class="fas fa-check"></i>
                    }
                }
            </dt>
            <dd class="col-9">
                <div style="width: 100%;">
                    <div style="width: @Percentages[@index];height: 30px; background-color: #32CD32;">
                    @a.Votes 
                    </div>
                </div>
            </dd>
            index = index + 1;
        }
    </dl>
    <div class="text-center">
        <div class="text-center">
        Votes: @TotalVotes
        </div>
        <button @onclick="GetNextQuestion" type="button" class="btn btn-primary">Next</button>
        <button @onclick="ToggleShowAnswers" type="button" class="btn btn-info">Show/Hide Answers</button>
    </div>
    
}
@code {
    HubConnection hubConnection;
    public Question Question { get; set; }
    public List<Answer> Answers{ get; set; }
    private bool _isShowingCorrectAnswer = false;
    private bool _isShowingAnswers = false;
    public int TotalVotes { get; set; }
    List<string> Percentages{ get; set; }
    public string ButtonText { get; set; }
    private int _currentQuestionIdx;
    public Poll Poll{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/pollhub"))
            .Build();

        hubConnection.On<Question, int>("ReceiveQuestion", (question, currentQuestionIdx) =>
        {
            _isShowingCorrectAnswer = false;
            Question = question;
            Answers = question.Answers.ToList();
            _currentQuestionIdx = currentQuestionIdx;
            CalcVotes(Answers);
            StateHasChanged();
        });

        hubConnection.On("ShowResult", () =>
        {
            _isShowingCorrectAnswer = true;
            StateHasChanged();
        });

        hubConnection.On("Update", async () =>
        {
            Question = await PollService.GetQuestion(Question.Id);
            Answers = Question.Answers.ToList();
            CalcVotes(Answers);
            StateHasChanged();
        });

        hubConnection.On<Poll, int>("ReceivePoll", (poll, currentQuestionIdx) =>
        {
            Poll = poll;
            _currentQuestionIdx = currentQuestionIdx;
            Question = poll.Questions.ToList()[currentQuestionIdx];
            Answers = Question.Answers.ToList();
            CalcVotes(Answers);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public void CalcVotes(List<Answer> answers)
    {
        int sum = 0;
        foreach(var a in answers)
        {

            sum += a.Votes;
        }
        TotalVotes = sum;
        List<string> percentages = new List<string>();
        foreach(var a in answers)
        {
            if(a.Votes == 0)
            {
                percentages.Add("1%");
            }
            else
            {
                var percentage = (double)a.Votes/sum*100;
                percentages.Add(percentage.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)+"%");
            }
        }
        Percentages = percentages;
    }

    public async Task GetNextQuestion()
    {
        if (_isShowingCorrectAnswer)
        {
            if (_currentQuestionIdx + 1 < Poll.Questions.Count)
            {
                await hubConnection.SendAsync("GetNextQuestion");
                _currentQuestionIdx++;
                _isShowingCorrectAnswer = !_isShowingCorrectAnswer;
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
        else
        {
            await hubConnection.SendAsync("ShowResult");
            _isShowingCorrectAnswer = !_isShowingCorrectAnswer;
        }
        StateHasChanged();
    }

    private void ToggleShowAnswers()
    {
        _isShowingAnswers = !_isShowingAnswers;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
