@page "/result"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject IPollService PollService

@if (Question is null)
{
    <p>Please wait..</p>
}
else
{
    <h2>@Question.Text</h2>
    <hr />
    <dl class="row">
        @foreach (var a in Question.Answers)
        {

            <dt class="col-3">
                @a.Text:
            </dt>
            <dd class="col-9">
                @a.Votes @if (_isShowingCorrectAnswer && a.CorrectAnswer)
                {<i class="fas fa-check"></i>}
            </dd>
        }
    </dl>
}
@code {
    HubConnection hubConnection;
    public Question Question { get; set; }
    private bool _isShowingCorrectAnswer;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/pollhub"))
            .Build();

        hubConnection.On<Question>("ReceiveQuestion", (question) =>
        {
            _isShowingCorrectAnswer = false;
            Question = question;
            StateHasChanged();
        });

        hubConnection.On("ShowResult", () =>
        {
            _isShowingCorrectAnswer = true;
            Console.WriteLine("KEKW");
            StateHasChanged();
        });

        hubConnection.On("Update", async () =>
        {
            Console.WriteLine("I RECEIVED THE VOTE!");
            Question = await PollService.GetQuestion(Question.Id);
            foreach(var a in Question.Answers)
            {
                Console.WriteLine(a.Votes);
            }
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
